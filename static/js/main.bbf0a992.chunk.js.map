{"version":3,"sources":["components/state.js","components/district.js","components/cities.js","components/address.js","App.js","serviceWorker.js","index.js"],"names":["SelectState","_this","this","options","props","val","map","obj","react_default","a","createElement","key","id","value","state","class","for","onChange","e","target","Component","SelectRegion","districts","district","length","places","selected","SelectCity","city","cities","Address","address","console","log","className","data","selectedstate","selectedDistrict","selectedCity","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","selectstate","states","load","getSelectedState","bind","assertThisInitialized","getSelectedDistrict","show","setState","getregion","getcity","_this2","forEach","i","_this3","data2","add","components_address","components_district","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8gDA2BeA,mLApBH,IAAAC,EAAAC,KAEAC,EADMD,KAAKE,MAAMC,IACHC,IAAI,SAAAC,GAClB,OACIC,EAAAC,EAAAC,cAAA,UAAQC,IAAKJ,EAAIK,GAAIC,MAAON,EAAIO,OAAQP,EAAIO,SAGpD,OACIN,EAAAC,EAAAC,cAAA,OAAKK,MAAM,cACjBP,EAAAC,EAAAC,cAAA,SAAOM,IAAI,QAAX,6BACAR,EAAAC,EAAAC,cAAA,UAAQK,MAAM,eAAeE,SAAU,SAACC,GAAD,OAAMjB,EAAKG,MAAMa,SAASC,EAAEC,OAAON,SAC5DL,EAAAC,EAAAC,cAAA,8BACCP,WAhBKiB,aC8BXC,mLA3BF,IAAApB,EAAAC,KAGFoB,EAAYpB,KAAKE,MAAMmB,SAE3B,GAAGD,EAAUE,OAAO,EACpB,IAAInB,EAAMiB,EAAUhB,IAAI,SAAAmB,GAEpB,OACIjB,EAAAC,EAAAC,cAAA,UAAQC,IAAKc,EAAOb,IAAKa,KAKhC,OACIjB,EAAAC,EAAAC,cAAA,OAAKK,MAAM,cACjBP,EAAAC,EAAAC,cAAA,SAAOM,IAAI,QAAX,6BACAR,EAAAC,EAAAC,cAAA,UAAQK,MAAM,eAAeE,SAAU,SAACC,GAAD,OAAMjB,EAAKG,MAAMa,SAASC,EAAEC,OAAON,SAC5DL,EAAAC,EAAAC,cAAA,UAAQgB,UAAQ,GAAhB,iBACCrB,WAtBOe,aC4BbO,yLAzBF,IAAA1B,EAAAC,KACD0B,EAAO1B,KAAKE,MAAMyB,OAEvB,GAAGD,EAAKJ,OAAO,EACf,IAAInB,EAAMuB,EAAKtB,IAAI,SAAAmB,GAEf,OACIjB,EAAAC,EAAAC,cAAA,UAAQC,IAAKc,EAAOb,IAAKa,KAIjC,OACCjB,EAAAC,EAAAC,cAAA,OAAKK,MAAM,cACXP,EAAAC,EAAAC,cAAA,SAAOM,IAAI,QAAX,6BACAR,EAAAC,EAAAC,cAAA,UAAQK,MAAM,eAAeE,SAAU,SAACC,GAAD,OAAMjB,EAAKG,MAAMa,SAASC,EAAEC,OAAON,SAC/DL,EAAAC,EAAAC,cAAA,6BACCL,WAlBMe,6BCkBXU,mLAfP,IAAIC,EAAU7B,KAAKE,MAGpB,OAFC4B,QAAQC,IAAIF,GAGTvB,EAAAC,EAAAC,cAAA,OAAKwB,UAAU,WACX1B,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,wBAAL,KAA+BqB,EAAQI,KAAKC,eAC5C5B,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,2BAAL,KAAkCqB,EAAQI,KAAKE,kBAC/C7B,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,uBAAL,IAA6BqB,EAAQI,KAAKG,sBAVlClB,aCuGRmB,cAjGb,SAAAA,IAAa,IAAAtC,EAAA,OAAAuC,OAAAC,EAAA,EAAAD,CAAAtC,KAAAqC,IACXtC,EAAAuC,OAAAE,EAAA,EAAAF,CAAAtC,KAAAsC,OAAAG,EAAA,EAAAH,CAAAD,GAAAK,KAAA1C,QAEKY,MAAQ,CACX+B,YAAcV,EAAKW,OACnBT,iBAAmB,GACnBf,UAAY,GAEZgB,aAAe,GACfT,OAAS,GACTkB,MAAO,GAGT9C,EAAK+C,iBAAmB/C,EAAK+C,iBAAiBC,KAAtBT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAvC,KACxBA,EAAKkD,oBAAsBlD,EAAKkD,oBAAoBF,KAAzBT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAvC,KAC3BA,EAAKmD,KAAOnD,EAAKmD,KAAKH,KAAVT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAvC,KAfDA,oFAkBXC,KAAKmD,SAAS,CAAE/B,UAAY,GAAGO,OAAS,8CAEzBX,GAEfhB,KAAKmD,SAAS,CAAEjB,cAAgBlB,EAAG6B,MAAO,EAAOzB,UAAY,GAAGgB,aAAe,GAAGT,OAAS,GAAGQ,iBAAmB,KAGjHL,QAAQC,IAAI/B,KAAKoD,UAAUpC,gDAETA,GAElBhB,KAAKmD,SAAS,CAAEhB,iBAAmBnB,EAAG6B,MAAO,EAAOT,aAAe,KACnEN,QAAQC,IAAI/B,KAAKqD,QAAQrC,sCAIjB4B,GAAO,IAAAU,EAAAtD,KAcd,MAXc,KAAX4C,GACH5C,KAAKmD,SAAS,CAAE/B,UAAY,iBAC5Ba,EAAKW,OAAOW,QAAQ,SAACC,GAEdA,EAAE5C,QAAUgC,IACfd,QAAQC,IAAI,UACZuB,EAAKH,SAAS,CAAE/B,UAAYoC,EAAEpC,eARpB,mCAiBVA,GAAU,IAAAqC,EAAAzD,KAchB,MAXiB,KAAdoB,GACHpB,KAAKmD,SAAS,CAAExB,OAAS,KACzB+B,EAAMtC,UAAUmC,QAAQ,SAACC,GAElBA,EAAEnC,WAAaD,IAClBU,QAAQC,IAAI,gBACZ0B,EAAKN,SAAS,CAAExB,OAAS6B,EAAE7B,YARrB,gCAiBPX,GAEJhB,KAAKmD,SAAS,CAAEN,MAAO,EAAMT,aAAepB,qCAU1C,IAAuB,IAApBhB,KAAKY,MAAMiC,KACd,IAAIc,EAAMrD,EAAAC,EAAAC,cAACoD,EAAD,CAAS3B,KAAQjC,KAAKY,QAEhC,OACEN,EAAAC,EAAAC,cAAA,OAAKwB,UAAU,OACb1B,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAACI,EAAD,CAAaT,IAAKH,KAAKY,MAAM+B,YAAa5B,SAAUf,KAAK8C,mBACzDxC,EAAAC,EAAAC,cAACqD,EAAD,CAAcxC,SAAYrB,KAAKY,MAAMQ,UAAWL,SAAUf,KAAKiD,sBAC/D3C,EAAAC,EAAAC,cAACmB,EAAD,CAAYA,OAAS3B,KAAKY,MAAMe,OAAQZ,SAAYf,KAAKkD,OACxDS,UA7FSzC,aCIE4C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO9D,EAAAC,EAAAC,cAAC6D,EAAD,MAASC,SAASC,eAAe,SDsH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.bbf0a992.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\n\r\nclass SelectState extends Component {\r\n\r\n   \r\n    \r\n    render(){\r\n        let val = this.props.val;\r\n        let options = val.map(obj => {\r\n            return (\r\n                <option key={obj.id} value={obj.state}>{obj.state}</option>\r\n            )\r\n        })\r\n        return (\r\n            <div class=\"form-group\">\r\n      <label for=\"sel1\">Select list (select one):</label>\r\n      <select class=\"form-control\" onChange={(e)=> this.props.onChange(e.target.value)}>\r\n                    <option >Select state</option>\r\n                    {options}\r\n                    \r\n                </select>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SelectState;","import React, { Component } from 'react';\r\n\r\n\r\nclass SelectRegion  extends Component {\r\n\r\n   \r\n    render (){\r\n      \r\n        \r\n       let districts = this.props.district;\r\n       \r\n       if(districts.length>1){\r\n       var val = districts.map(places => {\r\n        \r\n           return (\r\n               <option key={places.id}>{places}</option>\r\n           )\r\n       });\r\n       \r\n    }\r\n        return (\r\n            <div class=\"form-group\">\r\n      <label for=\"sel1\">Select list (select one):</label>\r\n      <select class=\"form-control\" onChange={(e)=> this.props.onChange(e.target.value)}>\r\n                    <option selected>Select Region</option>\r\n                    {val}\r\n                </select>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default SelectRegion;","import React, { Component } from 'react';\r\nimport '../App.css';\r\n\r\n\r\nclass SelectCity  extends Component {\r\n\r\n    render (){\r\n        let city = this.props.cities;\r\n       \r\n       if(city.length>1){\r\n       var val = city.map(places => {\r\n        \r\n           return (\r\n               <option key={places.id}>{places}</option>\r\n           )\r\n       });\r\n    }\r\n       return (\r\n        <div class=\"form-group\">\r\n        <label for=\"sel1\">Select list (select one):</label>\r\n        <select class=\"form-control\" onChange={(e)=> this.props.onChange(e.target.value)}>\r\n                   <option>Select City</option>\r\n                   {val}\r\n               </select>\r\n           </div>\r\n       )\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default SelectCity;","import React, { Component } from 'react';\r\nimport '../App.css';\r\n\r\n\r\nclass Address  extends Component {\r\n\r\n    render (){\r\n        let address = this.props;\r\n        console.log(address)\r\n    \r\n       return (\r\n           <div className=\"address\">\r\n               <div><strong>State </strong>: {address.data.selectedstate}</div>\r\n               <div><strong>District </strong>: {address.data.selectedDistrict}</div>\r\n               <div><strong>City </strong>:{address.data.selectedCity}</div>\r\n           </div>\r\n       )\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default Address;","import React, { Component } from 'react';\r\nimport SelectState from './components/state';\r\nimport SelectRegion from './components/district';\r\nimport SelectCity from './components/cities';\r\nimport data from './data.json';\r\nimport data2 from './data2.json';\r\nimport Address from './components/address';\r\n\r\nclass App extends Component {\r\n\r\n  constructor(){\r\n    super();\r\n\r\n    this.state = {\r\n      selectstate : data.states,\r\n      selectedDistrict : '',\r\n      districts : '',\r\n     \r\n      selectedCity : '',\r\n      cities : '',\r\n      load : false\r\n      \r\n    }\r\n    this.getSelectedState = this.getSelectedState.bind(this);\r\n    this.getSelectedDistrict = this.getSelectedDistrict.bind(this);\r\n    this.show = this.show.bind(this);\r\n  }\r\n  componentWillMount(){\r\n    this.setState({ districts : '',cities : ''});\r\n  }\r\n  getSelectedState(e){\r\n\r\n    this.setState({ selectedstate : e, load : false, districts : '',selectedCity : '',cities : '',selectedDistrict : ''});\r\n    \r\n   \r\n    console.log(this.getregion(e));\r\n  }\r\n  getSelectedDistrict(e){\r\n\r\n    this.setState({ selectedDistrict : e, load : false ,selectedCity : ''});\r\n    console.log(this.getcity(e));\r\n   \r\n    \r\n  }\r\n  getregion(states){\r\n    let district = [];\r\n     \r\n     if(states === '')\r\n     this.setState({ districts : 'select state'});\r\n     data.states.forEach((i) => {\r\n         \r\n         if(i.state === states){\r\n         console.log(\"EUREKA\");\r\n         this.setState({ districts : i.districts})\r\n         }\r\n     })   \r\n\r\n\r\n     return district;\r\n\r\n\r\n }\r\n getcity(districts){\r\n  let city = [];\r\n   \r\n   if(districts === '')\r\n   this.setState({ cities : ''});\r\n   data2.districts.forEach((i) => {\r\n       \r\n       if(i.district === districts){\r\n       console.log(\"EUREKA again\");\r\n       this.setState({ cities : i.cities})\r\n       }\r\n   })   \r\n   \r\n\r\n   return city;\r\n\r\n\r\n}\r\nshow (e){\r\n\r\n  this.setState({ load : true, selectedCity : e});\r\n\r\n  \r\n\r\n}\r\n\r\n  \r\n\r\n  render() {\r\n    \r\n    if(this.state.load === true){\r\n    var add = <Address data = {this.state}/>\r\n    }\r\n    return (\r\n      <div className=\"App\">\r\n        <h1>Address Page</h1>\r\n        <SelectState val={this.state.selectstate} onChange={this.getSelectedState}/>\r\n        <SelectRegion district = {this.state.districts} onChange={this.getSelectedDistrict} />\r\n        <SelectCity cities= {this.state.cities} onChange = {this.show} />\r\n        {add}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport './App.css';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}