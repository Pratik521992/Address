{"version":3,"sources":["components/state.js","components/district.js","components/cities.js","components/address.js","App.js","serviceWorker.js","index.js"],"names":["SelectState","_this","this","options","props","val","map","obj","react_default","a","createElement","key","id","value","state","className","onChange","e","target","Component","SelectRegion","districts","district","length","places","SelectCity","city","cities","Address","address","console","log","data","selectedstate","selectedDistrict","selectedCity","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","selectstate","states","selectedDsitrict","load","getSelectedState","bind","assertThisInitialized","getSelectedDistrict","show","setState","getregion","getcity","_this2","forEach","i","_this3","data2","add","components_address","components_district","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.31628e88.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\n\nclass SelectState extends Component {\n\n   \n    \n    render(){\n        let val = this.props.val;\n        let options = val.map(obj => {\n            return (\n                <option key={obj.id} value={obj.state}>{obj.state}</option>\n            )\n        })\n        return (\n            <div>\n                <select className='select' onChange={(e)=> this.props.onChange(e.target.value)}>\n                    <option >Select state</option>\n                    {options}\n                    \n                </select>\n            </div>\n        )\n    }\n}\n\nexport default SelectState;","import React, { Component } from 'react';\n\n\nclass SelectRegion  extends Component {\n\n   \n    render (){\n      \n        \n       let districts = this.props.district;\n       \n       if(districts.length>1){\n       var val = districts.map(places => {\n        \n           return (\n               <option key={places.id}>{places}</option>\n           )\n       });\n       \n    }\n        return (\n            <div>\n                <select className=\"select\" onChange={(e)=> this.props.onChange(e.target.value)}>\n                    <option>Select Region</option>\n                    {val}\n                </select>\n            </div>\n        )\n    }\n\n}\n\nexport default SelectRegion;","import React, { Component } from 'react';\nimport '../App.css';\n\n\nclass SelectCity  extends Component {\n\n    render (){\n        let city = this.props.cities;\n       \n       if(city.length>1){\n       var val = city.map(places => {\n        \n           return (\n               <option key={places.id}>{places}</option>\n           )\n       });\n    }\n       return (\n           <div >\n               <select className=\"select\" onChange={(e)=> this.props.onChange(e.target.value)}>\n                   <option>City</option>\n                   {val}\n               </select>\n           </div>\n       )\n    }\n}\n\n\n\nexport default SelectCity;","import React, { Component } from 'react';\nimport '../App.css';\n\n\nclass Address  extends Component {\n\n    render (){\n        let address = this.props;\n        console.log(address)\n    \n       return (\n           <div className=\"address\">\n               <div><strong>State </strong>: {address.data.selectedstate}</div>\n               <div><strong>District </strong>: {address.data.selectedDistrict}</div>\n               <div><strong>City </strong>:{address.data.selectedCity}</div>\n           </div>\n       )\n    }\n}\n\n\n\nexport default Address;","import React, { Component } from 'react';\nimport SelectState from './components/state';\nimport SelectRegion from './components/district';\nimport SelectCity from './components/cities';\nimport data from './data.json';\nimport data2 from './data2.json';\nimport Address from './components/address';\n\nclass App extends Component {\n\n  constructor(){\n    super();\n\n    this.state = {\n      selectstate : data.states,\n      selectedDistrict : '',\n      districts : '',\n      selectedDsitrict : '',\n      selectedCity : '',\n      cities : '',\n      load : false\n      \n    }\n    this.getSelectedState = this.getSelectedState.bind(this);\n    this.getSelectedDistrict = this.getSelectedDistrict.bind(this);\n    this.show = this.show.bind(this);\n  }\n  componentWillMount(){\n    this.setState({ districts : '',cities : ''});\n  }\n  getSelectedState(e){\n\n    this.setState({ selectedstate : e, load : false});\n    \n   \n    console.log(this.getregion(e));\n  }\n  getSelectedDistrict(e){\n\n    this.setState({ selectedDistrict : e, load : false});\n    console.log(this.getcity(e));\n   \n    \n  }\n  getregion(states){\n    let district = [];\n     \n     if(states === '')\n     this.setState({ districts : 'select state'});\n     data.states.forEach((i) => {\n         \n         if(i.state === states){\n         console.log(\"EUREKA\");\n         this.setState({ districts : i.districts})\n         }\n     })   \n\n\n     return district;\n\n\n }\n getcity(districts){\n  let city = [];\n   \n   if(districts === '')\n   this.setState({ cities : ''});\n   data2.districts.forEach((i) => {\n       \n       if(i.district === districts){\n       console.log(\"EUREKA again\");\n       this.setState({ cities : i.cities})\n       }\n   })   \n   \n\n   return city;\n\n\n}\nshow (e){\n\n  this.setState({ load : true, selectedCity : e});\n\n  \n\n}\n\n  \n\n  render() {\n    \n    if(this.state.load === true){\n    var add = <Address data = {this.state}/>\n    }\n    return (\n      <div className=\"App\">\n        <h1>Address Page</h1>\n        <SelectState val={this.state.selectstate} onChange={this.getSelectedState}/>\n        <SelectRegion district = {this.state.districts} onChange={this.getSelectedDistrict} />\n        <SelectCity cities= {this.state.cities} onChange = {this.show} />\n        {add}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport './App.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}